<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-04-11T10:56:46+02:00</updated><id>/feed.xml</id><title type="html">Leandro Chiarini</title><author><name>Leandro Chiarini</name></author><entry><title type="html">Events 2023/2024</title><link href="/events/2023/04/11/Events-2023-2024.html" rel="alternate" type="text/html" title="Events 2023/2024" /><published>2023-04-11T09:34:00+02:00</published><updated>2023-04-11T09:34:00+02:00</updated><id>/events/2023/04/11/Events-2023-2024</id><content type="html" xml:base="/events/2023/04/11/Events-2023-2024.html"><![CDATA[<p>Here is a quick list of events in the next year or so that I found interesting. This list reflects my personal preferences, but I think it might be useful to others.</p>

<h1 id="2023">2023</h1>
<h2 id="june">June</h2>
<ul>
  <li><a href="https://sites.google.com/view/rw-in-bath/">Random walks in Bath</a></li>
</ul>

<h2 id="july">July</h2>
<ul>
  <li><a href="https://www.spa2023.org/">Saint-Flour Summer school</a></li>
  <li><a href="http://127.0.0.1:4000">Stochastic Processes and their applications</a></li>
</ul>

<h2 id="september">September</h2>
<ul>
  <li><a href="https://sites.google.com/unifi.it/cime/c-i-m-e-courses/c-i-m-e-courses-2023/statistical-mechanics-and-stochastic-pde">Statistical Mechanics and Stochastic PDEs</a></li>
</ul>

<h2 id="december">December</h2>
<ul>
  <li><a href="https://www.mfo.de/occasion/2351/www_view">Arbeitsgemeinschaft: QFT and Stochastic PDEs</a></li>
</ul>

<h1 id="2024">2024</h1>
<h2 id="march-june">March-June</h2>
<ul>
  <li><a href="https://www.ipam.ucla.edu/programs/long-programs/geometry-statistical-mechanics-and-integrability/">Geometry, Statistical Mechanics, and Integrability</a></li>
</ul>]]></content><author><name>Leandro Chiarini</name></author><category term="Events" /><summary type="html"><![CDATA[Here is a quick list of events in the next year or so that I found interesting. This list reflects my personal preferences, but I think it might be useful to others.]]></summary></entry><entry><title type="html">A very simple command line interface for today’s arXiv entries</title><link href="/python/arxiv/2023/03/29/arxiv-today.html" rel="alternate" type="text/html" title="A very simple command line interface for today’s arXiv entries" /><published>2023-03-29T23:37:00+02:00</published><updated>2023-03-29T23:37:00+02:00</updated><id>/python/arxiv/2023/03/29/arxiv-today</id><content type="html" xml:base="/python/arxiv/2023/03/29/arxiv-today.html"><![CDATA[<h1 id="the-motivation">The motivation</h1>

<p>As many researcher in mathematics, I open arXiv daily to check on the latest articles on my field. And like many of them, I find arXiv’s interface slightly underwhelming. I like to be able to see the abstract and to be able to navigate through those articles a bit faster.</p>

<h1 id="the-script">The script</h1>

<p>There are several projects aiming to improve arXiv’s functionality (e.g <a href="https://arxiv-sanity-lite.com/">arxiv-sanity</a> and <a href="https://arxivist.com/">arXivist</a>). However, I wanted a bit more of flexibility to be able to integrate to my workflow with (n)vim. So I wrote this <a href="https://gist.github.com/leandrochiarini/202cd7e5c2d52cb7e2c45e2c9e4431db">little python script</a> that checks on the today’s arXiv.</p>

<p>It uses <a href="https://github.com/junegunn/fzf">fzf</a> (and its implementation in python <code class="language-plaintext highlighter-rouge">pyfzf</code>) to let you select the multiple articles from today’s arXiv RSS, read the abstract. You can easily modify the script to change the area you are following.</p>

<p>Once the script is running, enter your query to filter today’s article, press <code class="language-plaintext highlighter-rouge">TAB</code> to select each articles of your interest, then press <code class="language-plaintext highlighter-rouge">ENTER</code> to open all the selected articles. Besides opening the articles on your browser, the script also saves the information of all articles you opened via this script in a file <code class="language-plaintext highlighter-rouge">~/.arxiv-history</code>, which I use together with <code class="language-plaintext highlighter-rouge">vim-fzf</code> and <code class="language-plaintext highlighter-rouge">vim-UltiSnips</code> for easy reference it in my notes.</p>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://thevaluable.dev/practical-guide-fzf-example/">fzf guide</a></li>
  <li><a href="https://github.com/nk412/pyfzf">pyfzf</a></li>
  <li><a href="https://github.com/SirVer/ultisnips">UltiSnips</a></li>
</ul>]]></content><author><name>Leandro Chiarini</name></author><category term="python" /><category term="arXiv" /><summary type="html"><![CDATA[The motivation]]></summary></entry><entry><title type="html">Vim for mathematicians</title><link href="/vim/2022/05/28/Vim-for-mathematicians.html" rel="alternate" type="text/html" title="Vim for mathematicians" /><published>2022-05-28T21:37:00+02:00</published><updated>2022-05-28T21:37:00+02:00</updated><id>/vim/2022/05/28/Vim-for-mathematicians</id><content type="html" xml:base="/vim/2022/05/28/Vim-for-mathematicians.html"><![CDATA[<h1 id="a-word-of-warning">A word of warning</h1>

<p>Perhaps the most debatable part of this article is which text editor to use, there are several other very efficient text editor such as <a href="https://atom.io/">atom</a>, <a href="https://www.overleaf.com/">overleaf</a>, <a href="https://www.gnu.org/software/emacs/">eMacs</a> (which is way more than a text editor). All of these have premium features, such as git integration, either out of the box or via some plugin.</p>

<h1 id="vim-what-does-it-try-to-solve">vim: What does it try to solve?</h1>

<p>Writing code, even if it is just latex, involve a lot of repetition. For
instance, we often take time to write long commands that not only become
difficult to read, but also take a awful long time to write. One can define
their own commands in latex to reduce the burden, but often you might not agree
with your co-authors in which is the best version of said commands and that just
becomes a nuisance.</p>

<p>Before I explain how vim works, I will explain how it doesn’t.
works. You know how in Microsoft word (and most other text editors)</p>
<ul>
  <li>You can always move by using the arrow keys or the mouse</li>
  <li>You can always insert text by pressing any character</li>
  <li>You can always either arrow+Shift keys or drag the mouse to select text.</li>
  <li>You can always click on the menus at the top to invoke a special function</li>
</ul>

<p>Well, vim has a different approach to it. Instead, you have normal, insert,
visual and commands modes to do these tasks to do these tasks respectively.
You can go from a mode to another by certain combinations of key presses. For
instance, if you are in normal mode, you can enter insert mode by pressing the
key “i” and you can return to the normal mode by pressing the Esc key.</p>

<h1 id="vim-why-should-you-care">vim: Why should you care?</h1>

<p>The quick answer is: vim let’s you automatize a lot of the boring parts of
writing latex files. Let’s just give a few examples.</p>

<p>This separation into modes I mention in the previous section might seen like
madness at first. But the idea is to use the keyboard more effectively. Because
each key behaves in a different way depending in the mode you are on. For
instance, in insert mode, pressing the key “i” will insert the character “i” in
your file. But in normal mode, this puts you in insert mode instead.</p>

<p>And why is this any more effective? When you are in normal mode, which could be
read as “movement mode” as well, this means that your whole keyboard to do other
things rather then insert. For example:</p>
<ol>
  <li>Go from moving around in the file (say go to to the next paragraph,
or to the location of the last error that appeared during latex compilation)</li>
  <li>Make bulk changes in your file (like turn
the current paragraph in your latex file into a comment).</li>
</ol>

<p>Maybe you are not convinced yet. Here is the thing, vim lets you change the
behaviour of absolutely any of its default actions when pressing a key of
combination of keys or to define any new combinations. This means you can make
the whole program behave exactly like you want! Either by using its basic
version, by changing some presets yourself or by adding some plugins you can
make it do very specific behaviour in situations that you face hundreds of times
when writing latex.</p>

<p>Here are few example, specially when working of rough drafts of files, I use a
lot of the <code class="language-plaintext highlighter-rouge">align*</code> environment in latex, with as many lines as possible so it is
easy for me to review later. I changed the default behaviour of my vim to
whenever I am in a situation like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{align*}
	a 
&amp;=
	a-b+b | &lt;------- CURSOR RIGHT HERE
\end{align*}
</code></pre></div></div>
<p>if I press the <code class="language-plaintext highlighter-rouge">Y</code> i.e <code class="language-plaintext highlighter-rouge">Shift+y</code>, my vim will automatically copy the contents of
the last line of the align* environment and copy it bellow. That is, the content
of the file not becomes this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{align*}
	a 
&amp;=
	a-b+b
\\&amp;=
	a-b+b | &lt;------- CURSOR RIGHT HERE
\end{align*}
</code></pre></div></div>
<p>Notice that it even knows that you now need a \ at the beginning of the  new
line.</p>

<p>This seems useless, but when each line of latex is composed by multiple lines of
integrals and other things, this is much quicker than either holding down shift
and moving around, copying and pasting making the new changes and repeating the
exact same procedure. This can be done without the help of any plugins.</p>

<p>But plugins can indeed be super useful, for instance with the plugin <a href="https://github.com/lervag/vimtex">vimtex</a>,
vim becomes a latex powerhouse. For instance it know when your cursor is inside
a line of text or in a line of math display and it can behave differently
depending on the circunstantes. Together with another plugin called <a href="https://github.com/sirver/UltiSnips">UltiSnips</a>,
whenever I am not in a math environment, if I press tab mid-word (in insert mode)
vim will auto complete the word I am currently writing based on both the
dictionary and on previous words I used in that file. For example, it completes</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[...] Four| &lt;------- CURSOR RIGHT HERE
</code></pre></div></div>
<p>to</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[...] Fourier |&lt;------- CURSOR RIGHT HERE.
</code></pre></div></div>
<p>However, if I am in insert mode, whenever I press tab mid-word inside of a math
environment, vim will behave differently depending of what the word is. For
instance:</p>
<ol>
  <li>If the word is a single letter (or the code for a Greek letter such as
<code class="language-plaintext highlighter-rouge">\alpha, \beta</code> ) vim knows I like it to be a function, so it add the
parenthesis and moves my cursor to where the parameter goes. I.e, if before
pressing tab, I had
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> f| &lt;------- CURSOR RIGHT HERE
</code></pre></div>    </div>
    <p>vim changes it to</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> f(|)	    CURSOR IN BETWEEN THE PARENTHESIS HERE
</code></pre></div>    </div>
    <p>same for</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> \alpha| &lt;------- CURSOR RIGHT HERE
</code></pre></div>    </div>
    <p>vim changes it to</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> \alpha(|)	    CURSOR IN BETWEEN THE PARENTHESIS HERE
</code></pre></div>    </div>
  </li>
  <li>If the word is more than one letter long (and it is not a Greek letter), vim
assumes it is a latex command, and it adds a backslash at the beginning of
it. So for instance
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bar| &lt;------- CURSOR RIGHT HERE
</code></pre></div>    </div>
    <p>goes to</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> \bar| &lt;------- CURSOR RIGHT HERE
</code></pre></div>    </div>
    <p>after pressing tab.</p>
  </li>
  <li>And if I press tab again, the previous code now becomes
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> \bar{|}      CURSOR IN BETWEEN THE BRACKETS
</code></pre></div>    </div>
    <p>so that vim knows that it is a command that needs a argument.</p>
  </li>
</ol>

<p>And many other more specific examples. Those are very easy to customize and they
are great for making exactly the features that YOU want in your text editor,
instead of hoping that one day it would be added.</p>

<p>Finally, vim’s search and replace accepts regular expressions.  To be fair this
is fairly standard but people don’t seem to use them as often as they could.
What this means is that maybe you are searching for all the instances of \(a^2_n\)
because you realised your are using \(a\) for another quantity as well, and you
would like to substitute it for \(b^2_n\),  but how do you know whether you wrote
<code class="language-plaintext highlighter-rouge">a_n^2,{a_n}^2,a^{2}_n,a_n^{2}</code> and so on? With regular expressions you can search for
something line <code class="language-plaintext highlighter-rouge">(a^\{?2\}?_\{?n\}?|\{?a_\{?n\}?\}?^\{?2\}?)</code>  which looks horrid (but
so did <code class="language-plaintext highlighter-rouge">\int_{0}^{a+\theta} f(\omega)d\omega</code> the first time you wrote it) and
now you have all the 16 versions at once!</p>

<h1 id="vim-references-and-tutorials">Vim: References and tutorials</h1>
<ul>
  <li><a href="https://www.systutorials.com/vim-tutorial-beginners-vimtutor/">Vim tutor</a> -
the oficial tutorial for vim.</li>
  <li><a href="https://vim-adventures.com/">Vim adventures</a> - an adventure game that helps
you getting used to vim commands.
    <ul>
      <li>Once you are used to them, you can try <a href="https://www.vimgolf.com/">vim
Golf</a>. Where you are asked to change a file from
state to another in the minimal amount of key strokes.</li>
    </ul>
  </li>
  <li><a href="https://missing.csail.mit.edu/2020/editors/">Missing Semester</a>, as mentioned
before, of introductory lectures that explain from the theory to a simple
tutorial of how to use vim. I do recommend it!</li>
  <li><a href="https://www.youtube.com/watch?v=_NUO4JEtkDw&amp;list=PL8tzorAO7s0jy7DQ3Q0FwF3BnXGQnDirs&amp;index=16&amp;ab_channel=thoughtbot">Talk: Learning vim in a
week</a>
a talk on how to not lose too much time getting used to vim, but just going
straight into work.</li>
  <li><a href="https://castel.dev/">Gilles Castel website</a> is also a mathematician,
currently on his PhD. He is very skilled with the command line and does a lot
of scripts to also deal with latex files. Definitely a source of inspiration
for this blog.</li>
</ul>]]></content><author><name>Leandro Chiarini</name></author><category term="vim" /><summary type="html"><![CDATA[A word of warning]]></summary></entry><entry><title type="html">Git for mathematicians</title><link href="/git/2022/05/28/Git-for-mathematicians.html" rel="alternate" type="text/html" title="Git for mathematicians" /><published>2022-05-28T19:49:00+02:00</published><updated>2022-05-28T19:49:00+02:00</updated><id>/git/2022/05/28/Git-for-mathematicians</id><content type="html" xml:base="/git/2022/05/28/Git-for-mathematicians.html"><![CDATA[<h1 id="git-what-does-it-try-to-solve">Git: What does it try to solve?</h1>
<p>Most times I am collaborating with other researchers, we end up using Dropbox to
keep the updated version of the article. More often than not, we both have
copies of these same Dropbox folders somewhere else in our computers just to
avoid conflicts or lose a previous version of our files (I know that one can see
files from up to 30 days old on the website, or even more with the premium
features, but I don’t find those particularly convenient). This can get clunky
and often leads to dozens of different files with slightly different names. 
Even worse if you are sending versions back and forth by email.</p>

<p>There are other software that deal with this very same problem, they are usually
called “version control systems”. The most famous one is called git, no, not
github (github is a provider, much like gmail and email are not the same thing,
but very related). Git was created by Linus Torvalds, the person behind the
origin of Linux. He developed it when dealing with Linux development, which as
an open source project, had to deal with several other people collaborating
in the same code.</p>

<h1 id="git-why-should-you-care">Git: Why should you care?</h1>

<p>First, git will only sync when you ask it to. This sounds inconvenient, but it
means that you are not caught by surprise when it changes. Second, you can put
it anywhere you want in your computer and you tell it exactly what files you
want synced, therefore you don’t get the rubbish like .aux, .log files if you
compile your latex in the same folder. Third, it actually keeps copies of every
past version you asked it to remember in your computer. This might sound
inefficient for memory of the computer, but if you only ask it to remember the
.tex files and not the .pdf files, it really doesn’t take a lot of memory. In
fact, it does more than that! It let’s you create branches so you have parallel
versions of that same file. All with a robust way of navigating between all such
branches.</p>

<p>Let’s try to give an example. Suppose you finished the proof of your main
result, but now you think you found a better proof that would require some
substantial rewriting of the paper. But maybe you are not sure yet, so you don’t
want to completely scrap the previous version.  You can tell git to “create a
new branch”, and you can edit your .tex files (or any other files tracked by
git) freely without worrying about destroying your previous work. At the end,
you may think that either the proof should be implemented or not, at which point
you can tell git to merge these two versions into a single one, or just
ignore/delete the new one. One could always manually keep track of several
different files manually, but this can get messy. And it can become very tricky
to backtrack your steps. By letting git take care of that, you don’t need to
worry about it and you can concentrate only on the article writing itself.</p>

<p>Two things that really help organising are: whenever you make a commit i.e, you
tell git to keep a new version, you are prompted to enter a quick message
telling what you have done to the file. Even just a few words on every commit
can make the process of looking at previous versions much easier. The second
nice feature is that git let’s you see every single difference in the code, much
like <a href="https://ctan.org/pkg/latexdiff">latex diff</a>, line by line, highlighted so
it is easy to see! Long gone the days manually trying to spot exactly what your
collaborators changed in between version v-01-02-17.tex and v-01-02-22.tex.</p>

<p>I should mention that beside the command line/terminal, there are several
programs that let you use git in a more “graphical” way, including
<a href="https://atom.io/">atom</a>’s integration with git,
<a href="https://www.sourcetreeapp.com/">sourcetree</a> and <a href="https://atom.io/">github
desktop</a>. I use the plugin
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> to deal with git. I think
any of these solutions do a good job nowadays.</p>

<h1 id="git-references-and-tutorials">Git: References and Tutorials</h1>
<ul>
  <li><a href="https://missing.csail.mit.edu/2020/version-control/">Missing semester</a> - a
site I will reference often for other topics. Here, they offer a 85’ talk
about version control from theoretical to practical. They also offer a
comprehensive. If you are confused about how do deal with the shell/terminal,
do take a look at their first lecture, which I will talk about later on.</li>
  <li><a href="https://rogerdudler.github.io/git-guide/">Git, the simple guide</a> the absolute
opposite of the previous item. This is a quick reference list that I always
come back to with only the basics.
    <ul>
      <li><a href="https://ohshitgit.com/">Oh shit, git</a> In a very similar style to the
previous item, but focusing on how to clean up your mistakes in git.</li>
    </ul>
  </li>
  <li><a href="https://www.youtube.com/watch?v=BCQHnlnPusY&amp;list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV&amp;ab_channel=TheCodingTrain">Youtube playlist: coding train - git for poets</a>
a series of short videos introducing different aspects of git part by part.
Very friendly even if you never used the command line.</li>
  <li><a href="https://git-scm.com/book/en/v2">Book: Pro git</a>: If you want to know git in a
lot of detail, might be the way to go. But you do not need to go that deep on
your first trial.</li>
</ul>]]></content><author><name>Leandro Chiarini</name></author><category term="Git" /><summary type="html"><![CDATA[Git: What does it try to solve? Most times I am collaborating with other researchers, we end up using Dropbox to keep the updated version of the article. More often than not, we both have copies of these same Dropbox folders somewhere else in our computers just to avoid conflicts or lose a previous version of our files (I know that one can see files from up to 30 days old on the website, or even more with the premium features, but I don’t find those particularly convenient). This can get clunky and often leads to dozens of different files with slightly different names. Even worse if you are sending versions back and forth by email.]]></summary></entry><entry><title type="html">This blog</title><link href="/blog/2022/05/28/This-blog.html" rel="alternate" type="text/html" title="This blog" /><published>2022-05-28T18:47:00+02:00</published><updated>2022-05-28T18:47:00+02:00</updated><id>/blog/2022/05/28/This-blog</id><content type="html" xml:base="/blog/2022/05/28/This-blog.html"><![CDATA[<p>Hello there, my name is Leandro Chiarini. I am a mathematician, currently doing
a postdoc at Utrecht University. During the first year of my PhD, I started
coding again (after 6 years since my undergrad’s computer science classes).</p>

<p>Back then, I started coding in <a href="https://julialang.org/">Julia</a> which I will
talk about on this blog eventually. But for now, I want to focus on something
else. My objective is to present a few tools which are known between computer
scientists but not necessarily to other areas of science/academia. I am not
here to teach someone to code, there are many other people out there better
suited to do so. I also do not think every mathematician needs to code
(although I think it is very beneficial). What I am here to talk is about
dealing with latex files, collaborating with others, keeping version control
for articles, and how to keep a comprehensive list of your pdf files. All of
this in the context of a researcher in mathematics.</p>

<p>At the end of the day, latex is only a text file, the very same kind of file
that computer scientists build a large amount of tools to deal with. And
some of those are <strong>very</strong> effective.</p>

<p>As next posts about different tools come around, I will be focusing on three
questions for each</p>
<ol>
  <li>What problem does it try to solve?</li>
  <li>Why should you care?</li>
  <li>Where to find more information about it?</li>
</ol>

<p>Notice that (at least for now), I am not providing a tutorial of how to use such
tools, there are plenty of great ones online, and I will make sure to link the
ones I used in the post. Instead, this is really an attempt of convincing people
to use said tools. I will try to keep the first posts shorts and see what
happens from there.</p>

<p>I do, however, intend to write mini-tutorials on how to convert such tools to
mathematical writing. As most of the tutorials I suggest are focusing on
computer science. Think of this blog as “tools I believe would have saved me a
lot of time if I was introduced to before”.</p>

<p>Finally, I should make a few disclaimers. First, when I say “computer science
tools”,  I do not mean that they are the “right” tool  that every computer
scientist will (or should) agree that they are best.</p>

<p>Second, for the sake of conciseness,  I will keep things simple and definitely
not have a comprehensive list of features of the tools I talk about. Please
follow the references for more details.</p>

<p>Finally, I know very well that looking at the black and white screen of a
terminal can be terrifying at first. I only properly started diving into this
subjects without pure dread midway through the pandemic. But I will use the
words of van Neumann “In mathematics you don’t understand things, you just get
used to them”. The first time one is presented with an infinite dimensional
space, or whatever other complicated object it probably took feel
comfortable with such objects. Same applies here, it takes a while, but after
you get used to it, it just feels natural.</p>

<p>The first two topics are:</p>
<ol>
  <li><a href="https://en.wikipedia.org/wiki/Git">git</a>  for version control and collaborative writing.</li>
  <li>[vim](http://en.wikipedia.org/wiki/Vim_(text_editor), for dealing with files in a much faster way.</li>
</ol>

<p>After that, I might cover [bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell) scripts, <a href="https://taskwarrior.org/">taskwarrior</a>, and some other command line tools. I might discuss particle system simulations later on, let’s see.</p>]]></content><author><name>Leandro Chiarini</name></author><category term="blog" /><summary type="html"><![CDATA[Hello there, my name is Leandro Chiarini. I am a mathematician, currently doing a postdoc at Utrecht University. During the first year of my PhD, I started coding again (after 6 years since my undergrad’s computer science classes).]]></summary></entry></feed>